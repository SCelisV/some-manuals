

git commands


- git status -->  to see what the current state of our project is.

- git add octocat.txt --> To tell Git to start tracking changes.

- git commit -m "Add cute octocat story" --> To store our staged changes we run the commit command. 
	The files listed here are in the Staging Area. 
	We could add or remove files from the stage before we store them in the repository.

- git add '*.txt' --> Use wildcards (comodines) if you want to add many files of the same type.

- git commit -m "Add all the octocat txt files" --> To do all commit many files of the same type.

- git log --> show the history 

- git remote add origin https://github.com/try-git/try_git.git --> add a remote repository.

- git push -u origin master --> So let's push our local changes to our origin repository.
	The name of our remote is origin and the default local branch name is master. 
	The -u tells Git to remember the parameters, so that next time we can simply run git push and Git will know what to do. 
	

- git pull origin master --> We can check for changes on our GitHub repository and pull down any new changes by running.

- git diff HEAD --> what is  different from our last commit

- git add octofamily/octodog.txt --> Another great use for diff is looking at changes within files that have already been staged.

- git diff --staged --> to see the changes you just staged.

- git reset octofamily/octodog.txt --> You can unstage files by using the git reset command. Go ahead and remove octofamily/octodog.txt.

- git checkout -- octocat.txt --> Undo. Files can be changed back to how they were at the last commit by using this command.
	Go ahead and get rid of all the changes since the last commit for octocat.txt

- git branch clean_up --> We want to remove all these pesky octocats, so let's create a branch called clean_up, where we'll do all the work.
	When developers are working on a feature or bug they'll often create a copy (aka. branch) of their code they can make separate commits to. 
	Then when they're done they can merge this branch back into their main master branch.
	
- git checkout <branch> --> You can switch branches using the git checkout <branch> command. 

- git rm '*.txt' --> Removing All The Things from a branch.

- git commit -m "Remove all the cats" --> Commiting Branch Changes.

- git checkout master --> Switching Back to master.

- git merge clean_up --> you have to merge your changes from the clean_up branch into the master branch.

- git branch -d clean_up --> to delete a branch.

- git push --> push everything you've been working on to your remote repository.



